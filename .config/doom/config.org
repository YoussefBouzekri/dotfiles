* TODO Introduction
Welcome to my doom emacs literate configuration. this file sort of acts as both the configuration and the documentation at the same time. the elisp (emacs variant of lisp) code blocks get /tangled/ to the ~config.el~ file. this is made possible through the doom emacs module *literate*.
now you might be wondering why someone would still use emacs in <insert current year>, well I think this [[yt:bEfYm8sAaQg][video]] by systemcrafters explains this best. now let's get into the actual configuration
* Rudimentary Configuration
first off, let's make the output file run a tiny bit faster
#+begin_src elisp
;;; config.el -*- lexical-binding: t; -*-
#+end_src
** Personal Information
It is useful to have some basic information, apparently this is used by magit, gpg and such
#+begin_src elisp
(setq user-full-name "spcbfr"
      user-mail-address "spcbfr@protonmail.com")
#+end_src
** Window title
I’d like to have just the buffer name, then if applicable the project folder
#+begin_src elisp
(setq frame-title-format
      '(""
        (:eval
         (if (s-contains-p org-roam-directory (or buffer-file-name ""))
             (replace-regexp-in-string
              ".*/[0-9]*-?" "☰ "
              (subst-char-in-string ?_ ?  buffer-file-name))
           "%b"))
        (:eval
         (let ((project-name (projectile-project-name)))
           (unless (string= "-" project-name)
             (format (if (buffer-modified-p)  " ◉ %s" "  ●  %s") project-name))))))
#+end_src
For example when I open my config file it the window will be titled ~config.org ● doom~ then as soon as I make a change it will become ~config.org ◉ doom~
* Doom Configuration
** Visual Settings
*** Font Face
I am always expermienting with new fonts, so expect this to change very often
#+begin_src elisp
(setq doom-font (font-spec :family "IBM Plex Mono" :size 13) ;; the default general doom font
      doom-unicode-font (font-spec :family "Fira Code" :size 12) ;; Fallback unicode font for icons, glyphs, etc...
      doom-variable-pitch-font (font-spec :family "IBM Plex Mono" :size 15) ;; the font to use for variable-pitch text
      doom-big-font (font-spec :family "Jetbrains Mono" :size 24)) ;; font used in big-font-mode

#+end_src

I like how italics look so I use them for comments, keywords and other things across my system
#+begin_src elisp
(custom-set-faces!
  '(font-lock-comment-face :slant italic)
  '(font-lock-keyword-face :slant italic))
#+end_src
*** Dashboard
since the dashboard is its own major-mode, long key cords for quick commands are unnecessary, let's make them simpler
#+begin_src elisp
(map! :map +doom-dashboard-mode-map
      :ne "f" #'find-file
      :ne "r" #'consult-recent-file
      :ne "p" #'doom/open-private-config
      :ne "v" #'vterm/here
      :ne "c" (cmd! (find-file (expand-file-name "config.org" doom-private-dir)))
      :ne "q" #'save-buffers-kill-terminal)
#+end_src
after using doom for a while, the dashboard "useful commands" are no longer useful. we can remove them for a particularly /clean/ and minimal look
#+begin_src elisp
(remove-hook '+doom-dashboard-functions #'doom-dashboard-widget-shortmenu)
#+end_src
* Packages
** pdf-tools
pdf-tools is the package that most people use to open, navigate and read pdf's within emacs. thankfully doom has a module for it so we don't have to write our own config. The only thing I would change is set the midnight-mode (aka dark-mode) to be the default
#+begin_src elisp
(add-hook 'pdf-view-mode-hook (lambda ()
                                (pdf-view-midnight-minor-mode))) ; automatically turns on midnight-mode for pdfs
#+end_src
** rainbow-mode
rainbow-mode displays the actual color for any hex value color.  It's such a nice feature that I wanted it turned on all the time, regardless of what mode I am in, The following line enables rainbow mode for most buffers
#+begin_src elisp
(add-hook! '(text-mode-hook prog-mode-hook conf-mode-hook) #'rainbow-mode)
#+end_src
** emacs-everywhere
emacs everywhere opens an emacs frame for you to type to your heart's content, once you are done, Press ~C-c C-s~ and emacs will paste back what you've written to the focused window
The modeline is not useful to me in the emacs-everywhere popup window. It looks much nicer to hide it.
#+begin_src elisp
(remove-hook 'emacs-everywhere-init-hooks #'hide-mode-line-mode)
#+end_src
semi-center the popup over the target window
#+begin_src elisp
(defadvice! center-emacs-everywhere-in-origin-window (frame window-info)
  :override #'emacs-everywhere-set-frame-position
  (cl-destructuring-bind (x y width height)
      (emacs-everywhere-window-geometry window-info)
    (set-frame-position frame
                        (+ x (/ width 2) (- (/ width 2)))
                        (+ y (/ height 2)))))
#+end_src
and finally, make emacs-everywhere easier to match with an xmonad rule
#+begin_src elisp
(setq emacs-everywhere-frame-name-format "emacs-everywhere")
#+end_src
